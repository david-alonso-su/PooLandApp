@page "/"
@page "/mapview"
@using PooLandApp.Data
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using PooLandApp.Server
@using Radzen
@using Radzen.Blazor
@using Microsoft.Extensions.Options
@inject IJSRuntime jsRuntime
@inject PooLandDbContext pooContext
@inject IOptionsMonitor<LeafletOptions> leafletOptions
@inject IOptionsMonitor<DataOptions> dataOptions

<h3>MapView</h3>

@if (_map == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    <div style="height:90vh;">
        <LeafletMap Map="_map" />
    </div>
}



@code {

    private Map _map;



    //private LatLng _startAt = new LatLng(40.3556f, -3.5319f);


    //protected override void OnInitialized()
    protected override async Task OnInitializedAsync()
    {
        var MaxBounsUp = new LatLng(leafletOptions.CurrentValue.MaxBounds.Up.Latitude, leafletOptions.CurrentValue.MaxBounds.Up.Longitude);
        var MaxBounsDown = new LatLng(leafletOptions.CurrentValue.MaxBounds.Down.Latitude, leafletOptions.CurrentValue.MaxBounds.Down.Longitude);

        _map = new Map(jsRuntime)
            {

                Center = new LatLng(leafletOptions.CurrentValue.Center.Latitude, leafletOptions.CurrentValue.Center.Longitude),
                Zoom = leafletOptions.CurrentValue.Zoom,
                MaxBounds = new Tuple<LatLng, LatLng>(MaxBounsUp, MaxBounsDown)

            };


        _map.OnInitialized += async () =>
        {
            _map.AddLayer(new TileLayer
                {
                    UrlTemplate = leafletOptions.CurrentValue.UrlTemplate,
                    Attribution = leafletOptions.CurrentValue.Attribution
                });


            _map.AddLayer(new MarkerClusterGroup());


            foreach (var poo in pooContext.Poodata.Where(x => x.Date > DateTime.UtcNow.AddDays(- dataOptions.CurrentValue.DefaultStartDaysAgo)))
            {


                var marker = new Marker(poo.Latitude, poo.Longitude)
                {
                    Icon = new Icon
                    {
                        Url = "poo.png",
                        ClassName = "map-icon",
                    },
                    Popup = new Popup { Content = (new LeafletPopupLayout() { Description = poo.Description, Photo = poo.Photo}).GetHtml() },
                    Tooltip = new BlazorLeaflet.Models.Tooltip { Content = poo.Description },
                };
                _map.AddLayer(marker);
            }

        };
    }



}
