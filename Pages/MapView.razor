@page "/"
@page "/mapview"
@using PooLandApp.Data
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime jsRuntime
@inject PooLandDbContext pooContext

<h3>MapView</h3>

@if (_map == null)
{
      <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    <div style="height:90vh;">
        <LeafletMap Map="_map" />
    </div>
}



@code {

    private Map _map;

    private LatLng _startAt = new LatLng(40.3556f, -3.5319f);


    //protected override void OnInitialized()
    protected override async Task OnInitializedAsync()
    {
        _map = new Map(jsRuntime)
            {
                Center = _startAt,
                Zoom = 13f,
                MaxBounds = new Tuple<LatLng, LatLng>(new LatLng(40.3855f, -3.5534f), new LatLng(40.3261f, -3.4912f))

            };


        _map.OnInitialized += async () =>
        {
            _map.AddLayer(new TileLayer
                {
                    UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
                });


            _map.AddLayer(new MarkerClusterGroup());

            for (int i = 0; i < 100; i++)
            {
                var marker = new Marker(NextFloat(40.3261f, 40.3855f), NextFloat(-3.5534f, -3.4912f))
                    {
                        Icon = new Icon
                        {
                            Url = "poo.png",
                            ClassName = "map-icon",
                        }
                    };
                _map.AddLayer(marker);

            }


        };
    }


    static float NextFloat(float min, float max)
    {
        System.Random random = new System.Random();
        double val = (random.NextDouble() * (max - min) + min);
        return (float)val;
    }

}
