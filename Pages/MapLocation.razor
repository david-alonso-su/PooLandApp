@page "/MapLocation/{Coordinates}"
@using PooLandApp.Server
@using PooLandApp.Data
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using Radzen
@using Radzen.Blazor
@using BlazorStrap
@using Microsoft.Extensions.Options
@using Microsoft.EntityFrameworkCore
@using System.Drawing
@inject Radzen.DialogService DialogService
@inject NotificationService NotificationService
@inject IOptionsMonitor<LeafletOptions> leafletOptions
@inject IDbContextFactory<PooLandDbContext> DbFactory
@inject IJSRuntime jsRuntime

@if (MapComponent == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    <BSRow>
        <BSCol>
            <BSLabel>Latitude: @(Coordinates.Lat)</BSLabel>
        </BSCol>
        <BSCol>
            <BSLabel>Longitude:@(Coordinates.Lng)</BSLabel>
        </BSCol>
    </BSRow>
    <BSRow>
        <BSCol>
            <BSLabel>Neighborhood:@(NeighborhoodName)</BSLabel>
        </BSCol>
    </BSRow>
    <BSRow style="height: 60vh;">
        <BSCol>
            <LeafletMap Map="MapComponent" />
        </BSCol>
    </BSRow>
    <BSRow>
        <BSCol Class="text-center">
            <RadzenButton Click="@((args) => DialogService.Close(null))" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />
            <RadzenButton Click="@((args) => DialogService.Close(Coordinates))" Text="OK" Style="width: 120px" Disabled=@(!markerInsideBounds) />
        </BSCol>
    </BSRow>
}

@code {

    [Parameter]
    public LatLng Coordinates { get; set; }

    Map? MapComponent;

    Marker? marker;

    LatLng markerLatLng;
    string NeighborhoodName;
    bool markerInsideBounds = false;

    protected override async Task OnInitializedAsync()
    {
        var MaxBounsUp = new LatLng(leafletOptions.CurrentValue.MaxBounds.Up.Latitude, leafletOptions.CurrentValue.MaxBounds.Up.Longitude);
        var MaxBounsDown = new LatLng(leafletOptions.CurrentValue.MaxBounds.Down.Latitude, leafletOptions.CurrentValue.MaxBounds.Down.Longitude);

        if (Coordinates.Lat == 0 || Coordinates.Lng == 0)
            Coordinates = new LatLng(leafletOptions.CurrentValue.Center.Latitude, leafletOptions.CurrentValue.Center.Longitude);

        MapComponent = new Map(jsRuntime)
            {
                Center = Coordinates,
                Zoom = 15f,
                MaxBounds = new Tuple<LatLng, LatLng>(MaxBounsUp, MaxBounsDown)
            };

        MapComponent.OnInitialized += async () =>
        {
            MapComponent.AddLayer(new TileLayer
                {
                    UrlTemplate = leafletOptions.CurrentValue.UrlTemplate,
                    Attribution = leafletOptions.CurrentValue.Attribution
                });
            marker = new Marker(Coordinates)
                {
                    Icon = new Icon
                    {
                        Url = "poo.png",
                        ClassName = "map-icon",
                    },
                    Draggable = true
                };

            marker.OnDrag += async (a, b) =>
            {
                markerLatLng = b.LatLng;
            };

            marker.OnDragEnd += async (a, b) =>
            {
                var result = await IsPositionInNeighborhoods(markerLatLng);
                if (result)
                {
                    markerInsideBounds = true;
                    Coordinates = markerLatLng;
                }
                else
                {
                    markerInsideBounds = false;
                    var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Out Of boundaries", Detail = "Out of boundaries" };
                    NotificationService.Notify(message);
                }
                await InvokeAsync(() => StateHasChanged());
            };
            MapComponent.AddLayer(marker);

            NeighborhoodsShapes(MapComponent);
        };
    }

    async Task<bool> IsPositionInNeighborhoods(LatLng position)
    {

        using var pooContext = await DbFactory.CreateDbContextAsync();  
        return MapData.GISFunctions.IsPositionInNeighborhoods(position, pooContext.Neighborhoods, out NeighborhoodName);
    }

    async void NeighborhoodsShapes(Map mapComponent)
    {
        using var pooContext = await DbFactory.CreateDbContextAsync();
        MapData.NeighborhoodsShapes.Create(mapComponent, pooContext.Neighborhoods);
    }


}