@page "/report"
@using AspNetMonsters.Blazor.Geolocation;
@using Texnomic.Blazor.hCaptcha
@inject IJSRuntime JsRuntime
@inject ILogger<Report> Logger;
@inject LocationService LocationService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IDbContextFactory<PooLandDbContext> DbFactory
@inject IOptionsMonitor<PhotoOptions> photoOptions
@inject IOptionsMonitor<hCaptchaOptions> hCaptchaOptions
@inject IStringLocalizer<Report> Loc

@if (!IsFormSubmiting && !IsFormSubmited)
{
    <BSContainer Container="Container.Fluid">
        <RadzenTemplateForm Data="@data" Submit="@((FormData args) => { SubmitForm(args); })">

            <RadzenFieldset Text=@Loc["Poo Data"]>
                <BSRow MarginBottom="Margins.ExtraSmall" Justify="Justify.Start">
                    <BSCol Column="4" Align="Align.Center">
                        <RadzenLabel Text=@Loc["Description"] />
                    </BSCol>
                    <BSCol Column="8">
                        <RadzenTextBox Name="Description" @bind-Value="data.Description" Style="width:100%; display: block" />
                    </BSCol>
                </BSRow>
                <BSRow MarginBottom="Margins.Large" Align="Align.Center" Justify="Justify.Start">
                    <BSCol ColumnLarge="2" Align="Align.Center">
                        <RadzenLabel Text=@Loc["Location"] />
                    </BSCol>
                    <BSCol ColumnLarge="4">
                        <RadzenTextBox Name="Latitude" @bind-Value="data.strLatitude" Disabled="true" Style="width:100%; display: block" />
                        <RadzenRequiredValidator Component="Latitude" Text=@Loc["Latitude required"] Popup=true Style="position: absolute" />
                    </BSCol>
                    <BSCol ColumnLarge="4">
                        <RadzenTextBox Name="Longitude" @bind-Value="data.strLongitude" Disabled="true" Style="width:100%; display: block" />
                        <RadzenRequiredValidator Component="Longitude" Text=@Loc["Longitude required"] Popup=true Style="position: absolute" />
                    </BSCol>
                    <BSColBreak />
                    <BSCol ColumnLarge="2">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_location" Text=@Loc["Change Location"] Click=@ChangePosition />
                    </BSCol>
                    <BSCol ColumnLarge="2">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="refresh" Text=@Loc["Refresh Location"] Click=@UpdatePosition />
                    </BSCol>
                </BSRow>
                <BSRow PaddingLeftAndRight="Padding.Small" Align="Align.Start">
                    <BSCol ColumnLarge="6" OffsetLarge="3" Padding="Padding.Small">
                        <RadzenCard>
                            <RadzenLabel Text=@Loc["Photo"] />
                            <RadzenFileInput @bind-Value=@data.Photo TValue="string" Class="w-100" ChooseText=@Loc["Choose"]
                                         Change=@(args => OnChangePhoto(args, "FileInput")) Error=@(args => OnErrorPhoto(args, "FileInput"))
                                         MaxFileSize=@(photoOptions.CurrentValue.MaxFileSize) MaxWidth=@(photoOptions.CurrentValue.MaxWidth) MaxHeight=@(photoOptions.CurrentValue.MaxHeight) />
                        </RadzenCard>
                    </BSCol>
                </BSRow>
                @if (hCaptchaOptions.CurrentValue.Enabled)
                {
                    <BSRow PaddingLeftAndRight="Padding.Small" Align="Align.Start">
                        <BSCol ColumnLarge="6" OffsetLarge="3" Padding="Padding.Small">
                            <RadzenCard>
                                <HCaptcha Callback=hCaptchaCallback />
                                <RadzenNumeric Name="HCaptcha" @bind-Value="data.IsCaptchaValid" Visible="false" />
                                <RadzenNumericRangeValidator Min="1" Max="1" Component="HCaptcha" Text=@Loc["HCaptcha required"] Popup=true Style="position: absolute" />
                            </RadzenCard>
                        </BSCol>
                    </BSRow>                
                }   
                <BSRow Justify="Justify.Center" MarginTop="Margins.Medium">
                    <BSCol ColumnMedium="12" Align="Align.End" Class="text-center">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@Loc["Send"] />
                    </BSCol>
                </BSRow>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </BSContainer>

}
else if (IsFormSubmiting && !IsFormSubmited)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else if (!IsFormSubmiting && IsFormSubmited)
{
    <BSContainer  > 
        <BSRow Justify="Justify.Center">
            <BSCol Class="text-center">
                <RadzenCard  >
                    @if (!IsFormSubmitedError)
                    {
                        <div class="p-3 mb-2 bg-success text-white text-center">@Loc["Poo Uploaded"]</div>
                        <RadzenLink Icon="check" Path="mapview" Text=@Loc["Go to Map page"]  class="btn btn-success px-5 rounded-pill active btn-lg mb-2" aria-pressed="true"/>
                        <RadzenLink Icon="check" Path="report" Text=@Loc["Upload again"]  class="btn btn-primary px-5 rounded-pill active btn-lg"  @onclick="ResetVars"/>
                    }
                    else
                    {
                       <div class="p-3 mb-2 bg-danger text-white  text-center">@Loc["Sorry something went wrong"]</div>
                       <RadzenLink Icon="error" Path="report" Text=@Loc["Try it again"]   class="btn btn-danger px-5 rounded-pill active btn-lg" aria-pressed="true"  @onclick="ResetVars"/>                        
                    }
                </RadzenCard>
            </BSCol>
        </BSRow>
    </BSContainer>
}




@code {
    bool IsFormSubmiting = false;
    bool IsFormSubmited = false;
    bool IsFormSubmitedError = false;
    FormData data = new FormData();

    private bool IsCaptchaValid { get; set; }

    protected void hCaptchaCallback(bool Result)
    {
        IsCaptchaValid = Result;
        data.IsCaptchaValid = Convert.ToInt16(IsCaptchaValid);
        Logger.LogDebug($"hCaptchaCallback {Result}");
    }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocation();
            await InvokeAsync(() => StateHasChanged());
            Logger.LogDebug("OnAfterRenderAsync");
        }
    }

    async Task  ResetVars()
    {
        IsFormSubmiting = false;
        IsFormSubmited = false;
        IsFormSubmitedError = false;
        data = new FormData();
        IsCaptchaValid = false;
        await GetLocation();
    }

    async Task SubmitForm(FormData arg)
    {
        IsFormSubmiting = true;
        if (arg.Latitude == 0 || arg.Longitude == 0)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Loc["Invalid Coordinates"], Detail = Loc["Invalid Coordinates"] };
            NotificationService.Notify(message);
            IsFormSubmitedError = true;
            return;
        }

        if (hCaptchaOptions.CurrentValue.Enabled && arg.IsCaptchaValid == 0)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Loc["Invalid Captcha"], Detail = @Loc["Invalid Captcha"] };
            NotificationService.Notify(message);
            IsFormSubmitedError = true;
            return;
        }
        try
        {
            using var pooContext = DbFactory.CreateDbContext();
            var coordinate = new NetTopologySuite.Geometries.Point(arg.Latitude, arg.Longitude);
            var neighborhood = GISFunctions.FindNeighborhood(coordinate, pooContext.Neighborhoods);
            if (neighborhood == null)
            {
                var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Loc["Out Of boundaries"], Detail = @Loc["Out Of boundaries"] };
                NotificationService.Notify(message);
                IsFormSubmitedError = true;
                return;
            }
            var poo = new Poodatum
                {
                    Date = DateTime.UtcNow,
                    Description = arg.Description,
                    Location = coordinate,
                    Photo = arg.Photo,
                    Visible = true,
                    Neighborhood = neighborhood
                };

            await pooContext.AddAsync(poo);
            await pooContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {

            IsFormSubmitedError = true;
            Logger.LogError(ex.ToString());
        }
        finally
        {
            IsFormSubmiting = false;
            IsFormSubmited = true;
            await InvokeAsync(() => StateHasChanged());
            IsFormSubmited = true;
        }
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    public async Task ChangePosition()
    {
        var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        var height = dimension.Height - 56;
        var width = dimension.Width - 250;

        var result = await DialogService.OpenAsync<MapLocation>(Loc["Pick poo location"],
               new Dictionary<string, object>() { { "Coordinates", new LatLng(data.Latitude, data.Longitude) } },
               new DialogOptions() { Width = $"{width}px", Height = $"{height}px", Resizable = true, Draggable = true });

        if (result == null)
        {
            await GetLocation();
        }
        else
        {
            data.Latitude = ((LatLng)result).Lat;
            data.Longitude = ((LatLng)result).Lng;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async Task UpdatePosition()
    {
        await GetLocation();
        await InvokeAsync(() => StateHasChanged());
    }

    async Task GetLocation()
    {
        var location = await LocationService.GetLocationAsync();
        data.Latitude = (float)location.Latitude;
        data.Longitude = (float)location.Longitude;
    }

    void OnChangePhoto(string value, string name)
    {
        Logger.LogDebug($"{name} {value} changed");
    }

    void OnErrorPhoto(UploadErrorEventArgs args, string name)
    {
        Logger.LogError($"{args.Message}");
        var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Loc["Error Uploading Photo"], Detail = args.Message };
        NotificationService.Notify(message);
    }
}
