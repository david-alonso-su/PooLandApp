@page "/report"
@using PooLandApp.Data
@using Radzen
@using Radzen.Blazor
@using AspNetMonsters.Blazor.Geolocation;
@using BlazorLeaflet.Models
@using Microsoft.EntityFrameworkCore
@using Texnomic.Blazor.hCaptcha
@inject LocationService LocationService
@inject DialogService DialogService
@inject PooLandDbContext pooContext
@inject NotificationService NotificationService

<div class="row">

    @if (!IsFormSubmiting && !IsFormSubmited)
    {
        <RadzenTemplateForm Data="@data" Submit="@((FormData args) => { SubmitForm(args); })">
            <div class="row">
                <div class="col">
                    <RadzenFieldset Text="Poo Data">
                        <div class="row mb-2">
                            <div class="col-4 align-items-center d-flex">
                                <RadzenLabel Text="Description" />
                            </div>
                            <div class="col-8">
                                <RadzenTextBox Name="Description" @bind-Value="data.Description" Class="w-100" />
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="align-items-center d-flex col-2">
                                <RadzenLabel Text="Location" />
                            </div>
                            <div class="col-4  d-flex">
                                <RadzenTextBox Name="Latitude" @bind-Value="data.strLatitude" Disabled="true" />
                                <RadzenRequiredValidator Component="Latitude" Text="Latitude required" Popup=true Style="position: absolute" />
                            </div>
                            <div class="col-4  d-flex">
                                <RadzenTextBox Name="Longitude" @bind-Value="data.strLongitude" Disabled="true" />
                                <RadzenRequiredValidator Component="Longitude" Text="Longitude required" Popup=true Style="position: absolute" />
                            </div>
                            <div class="col-2  d-flex">
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="add_location" Text="Change" Click=@ChangePosition />
                            </div>
                        </div>
                        <div class="row px-3">
                            <div class="col-lg-6 offset-lg-3 p-3">
                                <RadzenCard>
                                    <h4 class="mb-4">Photo:</h4>
                                    <RadzenFileInput @bind-Value=@data.Photo TValue="string" Class="w-100"
                                                 Change=@(args => OnChangePhoto(args, "FileInput")) Error=@(args => OnErrorPhoto(args, "FileInput"))
                                                 MaxFileSize=@(10*1024*1024) MaxWidth=100 MaxHeight=100 />
                                </RadzenCard>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 offset-lg-3 p-3">
                                <HCaptcha Callback=hCaptchaCallback/>
                                <RadzenNumeric Name="HCaptcha" @bind-Value="data.IsCaptchaValid" Visible="false"/>
                                <RadzenNumericRangeValidator Min="1" Max="1" Component="HCaptcha" Text="HCaptcha required" Popup=true Style="position: absolute" />
                           
                            </div>  
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-12 d-flex align-items-end justify-content-center">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Send" />
                            </div>
                        </div>
                    </RadzenFieldset>
                </div>
            </div>
        </RadzenTemplateForm>
    }
    else if (IsFormSubmiting && !IsFormSubmited)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else if (!IsFormSubmiting && IsFormSubmited)
    {
        <div class="col">
            <RadzenCard>
            @if (!IsFormSubmitedError)
            {
                <RadzenIcon Icon="check" IconStyle=IconStyle.Success/>
                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Poo Uploaded"/>
                <RadzenLink Path="mapview" Text="Go to Map page" />
            }
            else
            {
                <RadzenIcon Icon="error" IconStyle=IconStyle.Danger />
                <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Sorry something went wrong"/>
                <RadzenLink Path="report" Text="Try it again"/>
            }
            </RadzenCard>
        </div>
    }


</div>

@code {
    bool IsFormSubmiting = false;
    bool IsFormSubmited = false;
    bool IsFormSubmitedError = false;
    FormData data = new FormData();

    private bool IsCaptchaValid { get; set; }

    protected void hCaptchaCallback(bool Result)
    {
        IsCaptchaValid = Result;
        data.IsCaptchaValid = Convert.ToInt16(IsCaptchaValid);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetLocation();
    }

    async Task SubmitForm(FormData arg)
    {
        IsFormSubmiting = true;
        if (arg.Latitude == 0 || arg.Longitude == 0)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Coordinates", Detail = "Invalid Coordinates" };
            NotificationService.Notify(message);
            return;
        }

        if (arg.IsCaptchaValid == 0)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Captcha", Detail = "Invalid Captcha" };
            NotificationService.Notify(message);
            return;
        }

        var poo = new Poodatum
            {
                Date = DateTime.UtcNow,
                Description = arg.Description,
                Latitude = arg.Latitude,
                Longitude = arg.Longitude,
                Photo = arg.Photo
            };

        try
        {
            await pooContext.AddAsync(poo);
            await pooContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {

            IsFormSubmitedError = true;
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            IsFormSubmiting = false;
            IsFormSubmited = true;
            await InvokeAsync( () => StateHasChanged());
            IsFormSubmited = true;
        }
    }

    public async Task ChangePosition()
    {

        var result = await DialogService.OpenAsync<MapLocation>("Pick poo location",
               new Dictionary<string, object>() { { "Coordinates", new LatLng(data.Latitude, data.Longitude) } },
               new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

        if (result == null)
        {
            await GetLocation();
        }
        else
        {
            data.Latitude = ((LatLng)result).Lat;
            data.Longitude = ((LatLng)result).Lng;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async Task GetLocation()
    {
        var location = await LocationService.GetLocationAsync();
        data.Latitude = (float)location.Latitude;
        data.Longitude = (float)location.Longitude;
    }

    void OnChangePhoto(string value, string name)
    {
        Console.WriteLine($"{name} {value} changed");
    }

    void OnErrorPhoto(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
        var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Uploading Photo", Detail = args.Message };
        NotificationService.Notify(message);
    }
}
